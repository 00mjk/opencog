
Misc development notes, in random order.
---------------------------------------

Would like to use continuations for the chat pipe ...
However, it seems that scm_with_guile() has a continuation barrier
in it. It appears that the barrier is overly pessimistic.

(define *myk* #f)

(call/cc (lambda (k) (set! *myk* k)))

(*myk* 42)


scm_c_call_with_current_module
scm_c_with_fluid

 scm_dynwind_begin (SCM_F_DYNWIND_REWINDABLE);
  scm_dynwind_fluid (fluid, value);
  ans = cproc (cdata);
  scm_dynwind_end ();


=========================================================

/usr/local/share/opencog/scm/nlp/scm/processing-utils.scm:
In procedure module-lookup: Unbound variable: r2l-rules

nlp/relex2logic/loader/gen-r2l-en-rulebase.scm:(define r2l-rules

(load-r2l-rulebase)

====================================================

nlp/scm/disjunct-list.scm

scheme@(guile-user)> (nlp-parse "who what where")
ERROR: In procedure cog-new-node:
ERROR: Throw to key `C++-EXCEPTION' with args `("cog-new-node"
"vector::_M_range_check")'.

scheme@(guile-user) [1]> ,bt
In opencog/nlp/chatbot/processing-utils.scm:
    226:8  2 (nlp-parse "who what where")
    42:29  1 (release-new-parsed-sents)
In unknown file:
           0 (cog-new-node 69 "# New Parsed Sentence")

#0  _M_lower_bound (this=<optimized out>, __k=..., __y=0x1c7ffe8,
    __x=0x100000000) at /usr/include/c++/4.8/bits/stl_tree.h:1157
#1  find (__k=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_tree.h:1805
#2  find (__x=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_map.h:837
#3  get (str=..., this=0x1c7ffe0)
    at atomspace-git/opencog/atomspace/StringIndex.h:52
#4  getAtom (str=..., type=3, this=0x1c74f48)
    at atomspace-git/opencog/atomspace/NodeIndex.h:66
#5  opencog::AtomTable::getHandle (this=this@entry=0x1c74ef0, t=t@entry=3,
    name=...)
    at atomspace-git/opencog/atomspace/AtomTable.cc:157
#6  0x00007ffff46398b7 in opencog::AtomSpace::add_node (this=0x1c74ef0,
    t=t@entry=3, name=..., async=async@entry=false)
    at atomspace-git/opencog/atomspace/AtomSpace.cc:149

 in guile:
scheme@(guile-user)> (cog-atomspace)
$1 = #<atomspace 0x31803a0>

above must be bogus or freed

 in cogserver:
Entering scheme shell; use ^D or a single . on a line by itself to exit.
guile> #<atomspace 0x300f150>


====================================================


scheme@(guile-user)> (use-modules (opencog))
duuude guile create as 0xc61840
duuude guile created count 1
duude call set_as
duuude swap: old as=(nil)
duuude swap: new as=0xc61840
duuude swapped: new count=2002001001

(start-cogserver "../lib/opencog-chatbot.conf")
duuuude cogserver telling scheme to use this: 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0xc61840
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=2002001000
duuuude cogserver finished telling scheme to use this: 0x1f0eeb0

OK now this ... why? happens on module load ... like scheme is getting
inited again? but its already inited ??

(its tie use-modules (opencog)) being by-pased and running again. So
bad.  Must fix this! XXXXXXXXXX

Also the define-public is not being respected.. why? XXXXXXX

also gc is not respecting the fluid ref -- its been set as
current as but gc is collecting it wtf.


duuude guile create as 0x20781c0
duuude guile created count 1
duude call set_as
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2

Now this .. who is releaseing?  The GC is .. releasing the very first
aAS created.
duuude guile release 0xc61840
duuude guile release 0xc61840 has count 2002000999 <-- this is a
define-public, should not be released! how is that so?
duuude guile release 0x1f0eeb0 <--- this belongs to the cogserver.

Now who is setting the released thing??
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1


who is setting again??
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0  << belongs to cogser
duuude swap: new as=0x20781c0
duuude swapped: new count=2

duuude guile release 0x1f0eeb0  << belong to cogser
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2
duuude guile release 0x20781c0
duuude guile release 0x20781c0 has count 1 << here GC thinks its free!
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=0
duuude call set env_as to 0x20781c0  << this is "freeed" who i suising it??
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=1
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0 has count 0
duuude guile delete!!!!! 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0

====================================================

(define (declarative-rule interpretation_index)
   (list (InheritanceLink interpretation_index
      (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))
   )
)

(define (pre-decl-rule int-index)
    (ListLink
        (declarative-rule int-index)
    )

(load
"/usr/local/share/opencog/scm/./opencog/nlp/relex2logic/rules/declarative.scm")






====================================================
bugs:

* r2l fails to identify speech act if sentence not terminated by period.
  Here: InterpretationLink 'InterpretationNode
  DefinedLinguisticConceptNode DeclarativeSpeechAct,

  declarative-rule truth-query-rule interrogative-rule

* "Where is ...?" not idnetified as a question ..

scm/sentence-matching.scm:

* typoes fool the fuzzy matcher... e.g.
  "Linas eats banannas. "Who eats bannanas?"  note variable nn

