
Misc development notes, in random order.
---------------------------------------

Would like to use continuations for the chat pipe ...
However, it seems that scm_with_guile() has a continuation barrier
in it. It appears that the barrier is overly pessimistic.

(define *myk* #f)

(call/cc (lambda (k) (set! *myk* k)))

(*myk* 42)


scm_c_call_with_current_module
scm_c_with_fluid

 scm_dynwind_begin (SCM_F_DYNWIND_REWINDABLE);
  scm_dynwind_fluid (fluid, value);
  ans = cproc (cdata);
  scm_dynwind_end ();


=========================================================

/usr/local/share/opencog/scm/nlp/scm/processing-utils.scm:
In procedure module-lookup: Unbound variable: r2l-rules

nlp/relex2logic/loader/gen-r2l-en-rulebase.scm:(define r2l-rules

(load-r2l-rulebase)

====================================================

nlp/scm/disjunct-list.scm

scheme@(guile-user)> (nlp-parse "who what where")
ERROR: In procedure cog-new-node:
ERROR: Throw to key `C++-EXCEPTION' with args `("cog-new-node"
"vector::_M_range_check")'.

scheme@(guile-user) [1]> ,bt
In opencog/nlp/chatbot/processing-utils.scm:
    226:8  2 (nlp-parse "who what where")
    42:29  1 (release-new-parsed-sents)
In unknown file:
           0 (cog-new-node 69 "# New Parsed Sentence")

#0  _M_lower_bound (this=<optimized out>, __k=..., __y=0x1c7ffe8,
    __x=0x100000000) at /usr/include/c++/4.8/bits/stl_tree.h:1157
#1  find (__k=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_tree.h:1805
#2  find (__x=..., this=0x1c7ffe0) at /usr/include/c++/4.8/bits/stl_map.h:837
#3  get (str=..., this=0x1c7ffe0)
    at atomspace-git/opencog/atomspace/StringIndex.h:52
#4  getAtom (str=..., type=3, this=0x1c74f48)
    at atomspace-git/opencog/atomspace/NodeIndex.h:66
#5  opencog::AtomTable::getHandle (this=this@entry=0x1c74ef0, t=t@entry=3,
    name=...)
    at atomspace-git/opencog/atomspace/AtomTable.cc:157
#6  0x00007ffff46398b7 in opencog::AtomSpace::add_node (this=0x1c74ef0,
    t=t@entry=3, name=..., async=async@entry=false)
    at atomspace-git/opencog/atomspace/AtomSpace.cc:149

 in guile:
scheme@(guile-user)> (cog-atomspace)
$1 = #<atomspace 0x31803a0>

above must be bogus or freed

 in cogserver:
Entering scheme shell; use ^D or a single . on a line by itself to exit.
guile> #<atomspace 0x300f150>


====================================================


scheme@(guile-user)> (use-modules (opencog))
duuude guile create as 0xc61840
duuude guile created count 1
duude call set_as
duuude swap: old as=(nil)
duuude swap: new as=0xc61840
duuude swapped: new count=2002001001

(start-cogserver "../lib/opencog-chatbot.conf")
duuuude cogserver telling scheme to use this: 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0xc61840
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=2002001000
duuuude cogserver finished telling scheme to use this: 0x1f0eeb0

OK now this ... why? happens on module load ... like scheme is getting
inited again? but its already inited ??

(its tie use-modules (opencog)) being by-pased and running again. So
bad.  Must fix this! XXXXXXXXXX

Also the define-public is not being respected.. why? XXXXXXX

also gc is not respecting the fluid ref -- its been set as
current as but gc is collecting it wtf.


duuude guile create as 0x20781c0
duuude guile created count 1
duude call set_as
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2

Now this .. who is releaseing?  The GC is .. releasing the very first
aAS created.
duuude guile release 0xc61840
duuude guile release 0xc61840 has count 2002000999 <-- this is a
define-public, should not be released! how is that so?
duuude guile release 0x1f0eeb0 <--- this belongs to the cogserver.

Now who is setting the released thing??
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1


who is setting again??
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0  << belongs to cogser
duuude swap: new as=0x20781c0
duuude swapped: new count=2

duuude guile release 0x1f0eeb0  << belong to cogser
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=1
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=2
duuude guile release 0x20781c0
duuude guile release 0x20781c0 has count 1 << here GC thinks its free!
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude swapped: old count=0
duuude call set env_as to 0x20781c0  << this is "freeed" who i suising it??
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude swapped: new count=1
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0 has count 0
duuude guile delete!!!!! 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x20781c0
duuude guile release 0x1f0eeb0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0
duuude call set env_as to 0x1f0eeb0
duuude swap: old as=0x20781c0
duuude swap: new as=0x1f0eeb0
duuude call set env_as to 0x20781c0
duuude swap: old as=0x1f0eeb0
duuude swap: new as=0x20781c0
duuude guile release 0x1f0eeb0
duuude guile release 0x20781c0

====================================================

(define (declarative-rule interpretation_index)
   (list (InheritanceLink interpretation_index
      (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))
   )
)

(define (pre-decl-rule int-index)
    (ListLink
        (declarative-rule int-index)
    )

(DefinedLinguisticConceptNode "TruthQuerySpeechAct"))
(InheritanceLink
 (DefinedLinguisticConceptNode "InterrogativeSpeechAct"))
(DefinedLinguisticConceptNode "ImperativeSpeechAct"))


(use-modules (opencog exec))
(nlp-parse "Who ate an apple?")
(load "../opencog/nlp/relex2logic/rules/interrogative.scm")
(load "../opencog/nlp/relex2logic/rules/in.scm")
(load "../opencog/nlp/chatbot/processing-utils.scm")

(InterpretationLink
   (InterpretationNode
"sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0_interpretation_$X")
   (ParseNode "sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0"
(stv 1 0.98210001))
)

why is there only one??  why is it not for the question?
who creates the InterpretationLink ?
who creates
sentence@d38e2bc5-5c9d-447d-bbff-3c0b15b32d91_parse_0_interpretation_$X"
??
r2l-parse does ... how? in processing_utils...

OK, but only the first one ever gets used ... fixed!

====================================================

* "Where is ...?" not identified as a question ..
  "When is ..." identified as conjunction by relex!


  Who works ...  What works ...
  Who sets interrogative-FLAG (_$qVar, T)
  "How is..."
  "Why is ..? also broken.


Where is the ball -- Q and Wq links

(InheritanceLink (stv 1.0 1.0)
   (WordInstanceNode "where@010c5f19-41d6-4b74-a4be-88a26f53d324")
   (DefinedLinguisticConceptNode "where")
)

(ReferenceLink (stv 1.0 1.0)
   (WordInstanceNode "where@010c5f19-41d6-4b74-a4be-88a26f53d324")
   (WordNode "where")
)


scm/sentence-matching.scm:

fixed! Relex was mis-behaving and R2L was using a fragile mechanism.

Relex failed to mark 4 of the 6 WH-words as interrogatives!

====================================================
* (process-query 'luser "Look to the left!") crashes
   C++-EXCEPTION' with args `("cog-fc"

  bug was the pre-SV-rule and definite-rule were running
    word-inst-get-lemma on LEFT-WALL, got nil, and then crashed.
  Fix to not run these rules when there is no lemma.

====================================================

(use-modules (opencog) (opencog nlp chatbot))
(process-query 'luser "Linas ate a cookie.")
(process-query 'luser "Who ate a cookie?")

(process-query 'luser "Linas ate an apple.")
(process-query 'luser "Who ate an apple?")

(cog-get-atoms 'InheritanceLink)

(cog-incoming-set (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))



(use-modules (opencog) (opencog nlp) (opencog nlp microplanning))
(init-trace "/tmp/wtf")

(define lap
(SequentialAndLink
   (InheritanceLink
      (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (ConceptNode "Linas"))
   (EvaluationLink
      (DefinedLinguisticPredicateNode "definite")
      (ListLink
         (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")))
   (ImplicationLink
      (PredicateNode "ate@37537945-4593-4136-bc70-236f4c86c43c")
      (PredicateNode "eat"))
   (InheritanceLink
      (ConceptNode "apple@5409a01f-f0d1-4665-af02-5811c9806b0e")
      (ConceptNode "apple"))
   (EvaluationLink
      (PredicateNode "ate@37537945-4593-4136-bc70-236f4c86c43c")
      (ListLink
         (ConceptNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
         (ConceptNode "apple@5409a01f-f0d1-4665-af02-5811c9806b0e")))
   (InheritanceLink
      (SpecificEntityNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (DefinedLinguisticConceptNode "male"))
   (InheritanceLink
      (SpecificEntityNode "Linas@862d2b73-dc84-4fc1-bc87-896476ba6541")
      (ConceptNode "Linas"))
))

(microplanning lap "declarative" *default_chunks_option* #f)

758c2970bd59a215f361b32f72a9f986966882c7 is the first bad commit
commit 758c2970bd59a215f361b32f72a9f986966882c7
Author: Linas Vepstas <linasvepstas@gmail.com>
Date:   Sun Nov 29 14:24:00 2015 -0600

    Wrap long lines

53f6cd548e24f2274878065bde7a0a0e8dc665f3 is good

iline 101 all-sets
wtf

(cog-get-atoms 'InterpretationNode)
(cog-incoming-set (car (cog-get-atoms 'InterpretationNode)))


(cog-incoming-set (DefinedLinguisticConceptNode "DeclarativeSpeechAct"))
(cog-incoming-set (car (cog-incoming-set (car (cog-get-atoms 'AnchorNode)))))

parse-get-r2l-outputs
r2l-parse

ahhh its focus-set!!!
parse-get-relex-outputs

(parse-get-relex-outputs parse-node)

ah haha!!!

====================================================

WTF:
fopencog has explocit error in scmutest -- can't find cog-atomspace
during module load

fopencog doesn't print this at guuile shell, but still doesn't define
it... oh right.


(use-modules (opencog)) from evaluator fails to actually
load the module scm code ...
probably because guile already thinks the module is loaded...


====================================================
ERROR: Unbound variable: pre-be-inheritance-rule
pre-be-inheritance-rule

====================================================

crash with null atom ptr .. line 455
outgoing set has null ptrs in it ... line 480
space :215
ForwardChainer::apply_rule
opencog/rule-engine/forwardchainer/ForwardChainer.cc:396

====================================================

state connected
IRC::disconnect()

dataout....

ret_len==SOCKET_ERROR
setsockopt (SO_KEEPALIVE

====================================================
bugs:

* 1916, #1922

* typoes fool the fuzzy matcher... e.g.
  "Linas eats banannas. "Who eats bannanas?"  note variable nn

====================================================

(use-modules (opencog) (opencog nlp chatbot))
(use-modules (opencog) (opencog nlp) (opencog nlp microplanning))

(nlp-parse "Ronald ate the apple.")
(nlp-parse "Ronald ate some fruit.")
(microplanning lap "declarative" *default_chunks_option* #f)

(process-query 'luser "Joe ate a pie.")
(process-query 'luser "Joe is eating a pie.")
(process-query 'luser "Who ate a cookie?")
(process-query "luser" "Joe ate a pear.")
(process-query "luser" "Who ate a pear?")

(process-query "luser" "Linas ate an apple.")
(process-query "luser" "Who ate an apple?")

(process-query "luser" "John Kennedy died.")
(process-query "luser" "Who died?")

(process-query "luser" "What is the color of the ball? ")
(process-query "luser" "What is the color of the book? ")
(process-query "luser" "Who died?")

(nlp-parse "My name is Raymond Reddington.")
(process-query "luser" "What is your name?")

(process-query "luser" "I sent the money to your boss.")
(process-query "luser" "Who sent money to your boss?")
(process-query "luser" "Who did you send the money to?")

(process-query "luser" "I sang a song to her")


(process-query "luser" "I sang a beautiful song to Mary")
(process-query "luser" "Who did I sing to?")
(process-query "luser" "I sang to Joan")
(process-query "luser" "Who did I sing to?")
(process-query "luser" "Who did I sing a beautiful song to?")

(process-query "luser" "Who did I sing to?")
(process-query "luser" "The ball is red")
(process-query "luser" "The book is blue")

(process-query "luser" "The ball is under the couch")

(process-query "luser" "John threw a green ball.")
(process-query "luser" "Mike threw a red ball.")

(process-query "luser" "Who threw a red ball?")
(process-query "luser" "Who threw a green ball?")
(process-query "luser" "Where is the ball?")

(process-query "luser" "I had two chocolates")
(process-query "luser" "how many chocolates do I have")

(process-query "luser" "what's your name")
(process-query "luser" "who is Raymond?")

(EvaluationLink (stv 1.0 1.0)
   (LinkGrammarRelationshipNode "Wq")
   (ListLink
      (WordInstanceNode
"LEFT-WALL@sentence@b7598d65-e2c7-4f4a-b873-02d548140b40_parse_0")
      (WordInstanceNode "how@a3499630-bbe8-4802-acbe-8a8f1213c714")
   )
)

(ReferenceLink (stv 1.0 1.0)
   (WordInstanceNode
"LEFT-WALL@sentence@b7598d65-e2c7-4f4a-b873-02d548140b40_parse_0")
   (WordNode "###LEFT-WALL###")
)
(WordInstanceLink (stv 1.0 1.0)
   (WordInstanceNode
"LEFT-WALL@sentence@b7598d65-e2c7-4f4a-b873-02d548140b40_parse_0")
   (ParseNode "sentence@b7598d65-e2c7-4f4a-b873-02d548140b40_parse_0")
)


====================================================
(process-query "luser" "Look left")

truthquery.scm
passive.scm
imperative.scm
how-q.scm

declarative borked!
interrogative


PrepositionalRelationshipNode
PartOfSpeechLink
InheritanceLink
LemmaLink

LinkGrammarRelationshipNode
InterpretationLink
ReferenceLink


who are you
Who are you?
Who is cobita-bot?
I am 33 years old
how old am I?
I am french
What nationality am I?
 nationality is the country a person is from
I am a person
France is a country
 I am from France
Where am I from?

(process-query 'luser "What nationality am I?")

cog-atom? says #t for deleted handle...

(define (show-arg node) (display node) node)


(define look-rule-1
   (BindLink
      (VariableList
         (var-decl "$sent" "SentenceNode")
         (var-decl "$parse" "ParseNode")
         (var-decl "$interp" "InterpretationNode")
         (var-decl "$verb-inst" "WordInstanceNode")
         (var-decl "$direct-inst" "WordInstanceNode")
         (var-decl "$direction" "WordNode")
      )
      (AndLink
         (parse-of-sent   "$parse" "$sent")
         (interp-of-parse "$interp" "$parse")
         (word-in-parse   "$verb-inst" "$parse")
         (LemmaLink (VariableNode "$verb-inst") (WordNode "look"))
         (word-pos "$verb-inst" "verb")
         (dependency "_advmod" "$verb-inst" "$direct-inst")
         (word-lemma "$direct-inst" "$direction")
      )
      (ExecutionOutput
         (GroundedSchema "scm: show-arg")
         (ListLink (Variable "$direction"))
      )
   )
)

(define look-rule-c
   (BindLink
      (VariableList
         (var-decl "$sent" "SentenceNode")
         (var-decl "$parse" "ParseNode")
         (var-decl "$interp" "InterpretationNode")
         (var-decl "$verb-inst" "WordInstanceNode")
         (var-decl "$direct-inst" "WordInstanceNode")
         (var-decl "$direction" "WordNode")
      )
      (AndLink
         (parse-of-sent   "$parse" "$sent")
         (interp-of-parse "$interp" "$parse")
         (word-in-parse   "$verb-inst" "$parse")
         (LemmaLink (VariableNode "$verb-inst") (WordNode "look"))
         (word-pos "$verb-inst" "verb")
         ; (dependency "_to-be" "$verb-inst" "$direct-inst")
         ; (dependency "_advmod" "$verb-inst" "$direct-inst")
         (lg-link "Pa" "$verb-inst" "$direct-inst")
         ; (lg-link "MVa" "$verb-inst" "$direct-inst")
         (word-lemma "$direct-inst" "$direction")
      )
      (ExecutionOutput
         (GroundedSchema "scm: show-arg")
         (ListLink (Variable "$direction")))))

(cog-bind look-rule-1)

(process-query 'luser "look up")
(process-query 'luser "look right")
de

   (DefinedLinguisticRelationshipNode "_to-be")
   (ListLink
      (WordInstanceNode "look@9a098e05-0afa-46e6-bd07-c6d83d58ee77")
      (WordInstanceNode "right@b2a9d004-4057-4613-a10b-0be7aea6c33e")
   )

WTF!!

MVa
Pa

scheme@(guile-user)> (cog-handle look-rule-x)
$7 = 3239
scheme@(guile-user)> (cog-handle look-rule-1)
$8 = 799

scheme@(guile-user)> (cog-as look-rule-1)
$9 = #<atomspace 0x140ede0>
scheme@(guile-user)> (cog-as look-rule-x)
$10 = #<atomspace 0x25fa3a0>


WTF.
scheme@(guile-user)> (cog-atomspace-uuid (cog-as look-rule-1))
$11 = 1
scheme@(guile-user)> (cog-atomspace-uuid (cog-as look-rule-x))
$12 = 800


Need to -- list all atomspaces ....
print atomspace inheritance

Argh starting the cogserver changes the atomspace. Fuck.

c-start-cogserver

&CogServerSCM::start_server

srvr = &cogserver();

// Handy dandy utility
inline CogServer& cogserver(void)
{
    return dynamic_cast<CogServer&>(server(CogServer::createInstance));
}


(define la
   (BindLink
      (VariableList
         (var-decl "$action" "ListLink")
      )
      (AndLink
         (StateLink current-action (Variable "$action"))
      )
      (Evaluation (GroundedPredicate "py:look_at_point")
         (Variable "$action"))
))

(use-modules (opencog nlp fuzzy))
(define s (nlp-parse "I don't know how to do that"))
(define r2l-set (get-r2l-set-of-sent (car s)))
(define reply (gen-sentences (cog-outgoing-set r2l-set)))
(delete-duplicates reply)


(nlp-parse "I don't know how to do that")
(define known-directives
	(list
	(nlp-parse "look left")
	(nlp-parse "Look right")
	(nlp-parse "Look up")
	(nlp-parse "Look down")

(define s (car (nlp-parse "look to the right")))
(define r2l-set (get-r2l-set-of-sent s))
(define fzset (cog-fuzzy-match r2l-set 'SetLink '()))
(define interp (car (get-interp-of-r2l fzset)))


(define (


(define reply (gen-sentences (cog-outgoing-set fzset)))
(delete-duplicates reply)

=---------------------------------------------------
https://github.com/ivmai/bdwgc/blob/master/mark_rts.c#L245
if (n_root_sets == MAX_ROOT_SETS) {
        ABORT("Too many root sets");
    }

https://github.com/ivmai/bdwgc/blob/master/include/private/gc_priv.h#L1037
#   define MAX_ROOT_SETS 8192

want LARGE_CONFIG

--enable-large-config

./configure --enable-cplusplus --enable-large-config


./configure --enable-cplusplus --enable-gc-assertions --enable-large-config

Assertion failure: reclaim.c:314

tests/nlp/anaphora/test_anaphora.py
========================================================
(use-modules (opencog) (opencog nlp chatbot) (opencog nlp fuzzy))
(use-modules (opencog) (opencog nlp) (opencog nlp microplanning))


(get-r2l-set-of-sent (car (nlp-parse "look right")))

Yay it works

========================================================

(use-modules (opencog) (opencog query) (opencog exec))
(Inheritance (Concept "foo") (Concept "baz"))
(Inheritance (Concept "bar") (Concept "baz"))

(define x
	(GetLink
		(Variable "$x")
		(AndLink
			(PresentLink
				(Inheritance (Concept "foo") (Variable "$x")))
			(FuzzyLink
				(Inheritance (Concept "bar") (Variable "$x")))
		)))

(cog-execute! x)

(define y
		(Inheritance (Concept "foo") (Concept "baz"))
	)

(cog-fuzzy-match y)


(use-modules (opencog) (opencog query) (opencog exec))
(Inheritance (Concept "foo") (Concept "baz"))
(Inheritance (Concept "bar") (Concept "baz"))

(define x
	(GetLink
		(TypedVariable
			(Variable "$x")
			(Signature (Inheritance (Concept "foo") (Type "ConceptNode"))))

		(AndLink (Variable "$x"))))

(define b
	(GetLink
		(TypedVariable
			(Variable "$x")
			(TypeChoice
				(Signature (Inheritance (Concept "foo") (Type "ConceptNode")))
				(Signature (Inheritance (Concept "bar") (Type "ConceptNode")))))

		(AndLink (Variable "$x"))))

(cog-execute! x)

_type_restrictions = &vars._simple_typemap

(EvaluationLink
	(PredicateNode "foo")
	(ListLink (ConceptNode "bingo") (ConceptNode "yes!")))

(EvaluationLink
	(AnchorNode "bar")
	(ListLink (ConceptNode "hurrah") (ConceptNode "yay!")))

(EvaluationLink
	(ConceptNode "baz")
	(ListLink (ConceptNode "oops") (ConceptNode "Oh no, Mr. Bill!")))

(define pred
	(GetLink
		(TypedVariable
			(Variable "$x")
			(Signature 
				(EvaluationLink
					(TypeChoice
						(TypeNode "PredicateNode")
						(TypeNode "AnchorNode"))
					(ListLink
						(Type "ConceptNode") (Type "ConceptNode")))))
		(Variable "$x")))

;--------------------------

(define b
   (BindLink
		(VariableList (Variable "$x") (Variable "$y"))
		(And
			(Inheritance (Concept "foo") (Variable "$x"))
			(Equal (Variable "$x") (Variable "$y"))
		)
		(Variable "$y")))

ERROR: Throw to key `C++-EXCEPTION' with args `("cog-new-link" "Variable
not groundable: (VariableNode \"$y\") ; [782][1]\n\n
(/home/linas/src/novamente/src/atomspace-git/opencog/atoms/pattern/PatternLink.cc:776)")'.


;--------------------------

Given four parsed sent with sent node,  and link from that to grounded action.
Given new sent, return most similar one(s)

(use-modules (opencog) (opencog query) (opencog exec))

(Member (InterpretationNode "1") (Anchor "look-actions"))
(Member (InterpretationNode "2") (Anchor "look-actions"))
(Member (InterpretationNode "3") (Anchor "look-actions"))

(State (Anchor "curr-interp") (InterpretationNode "55"))

run set-to-member conversion such that
(Member foo (SetLink ... foo ...))
is-member-link


(define x
	(GetLink
		(VariableList
			(TypedVariable (Variable "$likely-interp") (Type "InterpretationNode"))
			(TypedVariable (Variable "$curr-interp") (Type "InterpretationNode"))
			(TypedVariable (Variable "$curr-set") (Type "SetLink"))
			(TypedVariable (Variable "$likely-set") (Type "SetLink"))
		)
		(AndLink
			(Member (Variable "$likely-interp") (Anchor "look-actions"))
			(State (Anchor "curr-interp") (Variable "$curr-interp"))
			; (Evaluation (Predicate "scm: is-member")
			;	(List (Variable "$curr-interp") (Variable "$curr-set")))
			(Member (Variable "$curr-interp") (Variable "$curr-set"))
			(Member (Variable "$likely-interp") (Variable "$likely-set"))
			; (FuzzyLink (Variable "$curr-set"))
			(EvaluationLink
				(Predicate "scm is-similar")
				(List (Variable "$curr-set") (Variable "$likely-set")))

		)))

(cog-execute! x)


DefinedType in DefineLink
TypedAtomLink
RightArrowLink

chaining is parsing.

variadic? optional?

/ If its a user-defined type, replace by it's defintion.
+       if (DEFINED_TYPE_NODE == dpt)
+       {
+               deep = DefineLink::get_definition(deep);
+               dpt = deep->getType();
+       }
variadic


bisect
c1b9599be42c3fffb9b59bc25fc2b3d67854a112 is good

c481d24449ac7a3be9057fea59bd8bcd32c08709 is bad

HandleSeq q = get_neighbors(htarget, false, true, SET_LINK, false);

Fuzzy.cc:167:90: error: ‘get_neighbors’ was not declared in this scope
             HandleSeq word_inst = get_neighbors(*inst, false, true,
REFERENCE_LINK, false);


nlp/sureal/SuRealPMCB.cc needs get_predicates
nlp/fuzzy/Fuzzy.cc needs get_predicates

todo -- true false
true true

isTarget -- if h occurs anywher in an unordered link, or occurs 
in non-first-place in ordered link.

